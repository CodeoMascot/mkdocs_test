{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"MkLorum H1 For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"MkLorum H1"},{"location":"#mklorum-h1","text":"For full documentation visit mkdocs.org .","title":"MkLorum H1"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"2018-05-02-Hello-Humans/","text":"Here is my first post on GitHub using Jekyll and I turn to my last in twenties. Phew..! life passes fast.. isn't it? Well, time ticks at it's own pace. So much to learn and so less time. World is running and so are we. Run.. chase your dreams.. rise and shine.. but remember, we are humans blessed enough to enjoy mother earth. Life is a journey, enjoy all ups and downs. Here, I basically write notes of what I learn and what I do. This helps me refer back and keep a log of how I did something. I was saving my notes locally and randomly so thought of putting them onto GitHub to centralize them and make them available to the world. A few posts here might not be very well document or in polished manner as they are quick notes to refer back. However, I do include the most essential part and try not to break the flow in understanding a concept. Thanks for landing here. A quote from Steve Jobs' speech at Harvard: Stay Hungry.. Stay Foolish.. ;) Cheers...!","title":"Hello Humans!"},{"location":"2018-06-16-github-pages-jekyll/","text":"Github Pages are static sites that can be hosted on GitHub for free. Github Pages use Jekyll (a Ruby Gem) to build static site from markdown files. Do not remove this line (it will not be displayed) {:toc} Quickest way to get started Use 'Jekyll Now', it is flat 30 seconds blog setup. Follow the steps below: You can setup Jekyll on GitHub by forking Jekyll Now repository. The readme.md in above repository is a very good tutorial that you can follow and setup Jekyll on your GitHub account. Modify config files and github settings as stated in above readme. your blog is live With this you can use your time on writing post rather than other geeky stuff, but if you need to setup everything or if it is required your can follow setting Jekyll locally below. Now that blog is working, we need to write posts. Publishing Posts to the Site Posts can be published in 3 ways: Directly write on GitHub.com: This is fastest way and requires no setup. You can go to _posts folder on this repository and create new .md file. Local MD files You can use Sublime, atom or any other text editor on your local machine and the upload it to GitHub or use Git locally then commit and push to GitHub. Local Jekyll setup You can install Jekyll locally on your machine. This will require you to install Ruby as well. Then on localhost you can render your entire website (blog) and see changes. Then you can push it to GitHub. Setting up Jekyll to run locally You need to have ruby, gem, gcc and g++ installed. else do brew install gem and all. Then you need to install gem install bundler jekyll Next, gem install github-pages installs all gems required by github pages, all of the dependancies you\u2019ll need, like: kramdown, jemoji, and jekyll-sitemap jekyll new my_blog creates scaffold for a new site. This is all you need to do. jekyll build builds jekyll serve serves the site to localhost:4000. Detailed article on installing jekyll, here . Tutorial with all steps, KBRoman . Advanced features: If you need to extend the functionality of Jekyll posts then advanced tutorial can be found at here . Issues: If you see permission issue on Mac, run using sudo . This may occur as gem and ruby are already installed on mac but in Library folder which is not writable. If you want to run locally already existing site , then create a new temp blog then copy 'Gemfile' and 'Gemfile.lock'. The site root should have these files. They are required to provide all gems that Jekyll requires for proper functionality. Github Site for your Projects Github can further be used to host your projects site. This is kind of a sub-site/sub-domain of main site. My site: myname.github.io/ Project Site: myname.github.io/abc_project/ All projects repository come under gh-pages branch and not master. Creating a sub site is same as creating a main site. Jekyll Notes Jekyll is a Ruby library to make blog and pages site. _config.yml has all configuration variables. Posts are markdown files store under _posts folder Pages are markdown files in root location. _layouts have different .html files that define the layout for example: default, pages or posts. These can include other templates from _includes folder. They have {{ content }} which gets populated by file that uses this layout. For eg. 'default.html' can include 'meta.html'. 'post.html' can use 'default.html' as layout. So all code in 'post.html' will populate {{ content }} in default.html some_post.md can use post.html as layout. So all markdown from this file will be populated to {{ content }} of 'post.html'. To list all categories in site Category returns two array items, first is category name and second is another array of posts. Categories in site: {\\% for category in site.categories \\%} - {{ category[0] }} {\\% endfor \\%} Related post: How to add syntax highlighting to Jekyll Sites","title":"Github Pages and Jekyll Sites"},{"location":"2018-06-16-github-pages-jekyll/#quickest-way-to-get-started","text":"Use 'Jekyll Now', it is flat 30 seconds blog setup. Follow the steps below: You can setup Jekyll on GitHub by forking Jekyll Now repository. The readme.md in above repository is a very good tutorial that you can follow and setup Jekyll on your GitHub account. Modify config files and github settings as stated in above readme. your blog is live With this you can use your time on writing post rather than other geeky stuff, but if you need to setup everything or if it is required your can follow setting Jekyll locally below. Now that blog is working, we need to write posts.","title":"Quickest way to get started"},{"location":"2018-06-16-github-pages-jekyll/#publishing-posts-to-the-site","text":"Posts can be published in 3 ways: Directly write on GitHub.com: This is fastest way and requires no setup. You can go to _posts folder on this repository and create new .md file. Local MD files You can use Sublime, atom or any other text editor on your local machine and the upload it to GitHub or use Git locally then commit and push to GitHub. Local Jekyll setup You can install Jekyll locally on your machine. This will require you to install Ruby as well. Then on localhost you can render your entire website (blog) and see changes. Then you can push it to GitHub.","title":"Publishing Posts to the Site"},{"location":"2018-06-16-github-pages-jekyll/#setting-up-jekyll-to-run-locally","text":"You need to have ruby, gem, gcc and g++ installed. else do brew install gem and all. Then you need to install gem install bundler jekyll Next, gem install github-pages installs all gems required by github pages, all of the dependancies you\u2019ll need, like: kramdown, jemoji, and jekyll-sitemap jekyll new my_blog creates scaffold for a new site. This is all you need to do. jekyll build builds jekyll serve serves the site to localhost:4000. Detailed article on installing jekyll, here . Tutorial with all steps, KBRoman . Advanced features: If you need to extend the functionality of Jekyll posts then advanced tutorial can be found at here . Issues: If you see permission issue on Mac, run using sudo . This may occur as gem and ruby are already installed on mac but in Library folder which is not writable. If you want to run locally already existing site , then create a new temp blog then copy 'Gemfile' and 'Gemfile.lock'. The site root should have these files. They are required to provide all gems that Jekyll requires for proper functionality.","title":"Setting up Jekyll to run locally"},{"location":"2018-06-16-github-pages-jekyll/#github-site-for-your-projects","text":"Github can further be used to host your projects site. This is kind of a sub-site/sub-domain of main site. My site: myname.github.io/ Project Site: myname.github.io/abc_project/ All projects repository come under gh-pages branch and not master. Creating a sub site is same as creating a main site.","title":"Github Site for your Projects"},{"location":"2018-06-16-github-pages-jekyll/#jekyll-notes","text":"Jekyll is a Ruby library to make blog and pages site. _config.yml has all configuration variables. Posts are markdown files store under _posts folder Pages are markdown files in root location. _layouts have different .html files that define the layout for example: default, pages or posts. These can include other templates from _includes folder. They have {{ content }} which gets populated by file that uses this layout. For eg. 'default.html' can include 'meta.html'. 'post.html' can use 'default.html' as layout. So all code in 'post.html' will populate {{ content }} in default.html some_post.md can use post.html as layout. So all markdown from this file will be populated to {{ content }} of 'post.html'. To list all categories in site Category returns two array items, first is category name and second is another array of posts. Categories in site: {\\% for category in site.categories \\%} - {{ category[0] }} {\\% endfor \\%} Related post: How to add syntax highlighting to Jekyll Sites","title":"Jekyll Notes"},{"location":"2018-06-28-mac-linux-terminal/","text":"Here are some basic understandings and commands that can be used on UNIX terminal and eventually on Mac. Mac Specific Homebrew package manager for mac, cask are usually GUIs apps like Sublime formulae are packages, CLIs, like node Brew Global Commands: brew update - Update brew and cask list, not packages brew upgrade - Upgrade all packages brew list - List installed packages and casks brew outdated - List outdated packages? brew doctor - Diagnose brew issues brew cleanup - cleans all packages brew services list - lists all services installed Brew Commands: brew install git - Install a package brew uninstall git - Remove/Uninstall a package brew upgrade git - Upgrade a package brew switch git 2.5.0 - Change versions brew list --versions git See what versions you have brew cleanup git Remove old versions Brew Cask (GUI) commands: brew install --cask firefox Install the Firefox browser brew list --cask List installed applications Others diskutil list - lists all disks Format a disk from Mac terminal: diskutil eraseDisk FILE_SYSTEM DISK_NAME DISK_IDENTIFIER eg: diskutil eraseDisk FAT32 VY_Disk /dev/disk2 or use ExFAT /Volumes/PenDrive location of usb mounts Copy to clipboard $ pbcopy < my_filename.ext it copies the content of file to clipboard. It is helpful to quickly copy RSA key to clipboard which you need to paste on, may be, GitHub. Androids ~/.android - google utility folder avdmanager list avd - lists all android virtual devices installed. Uninstalling: Usually check for following dirs and remove: sudo rm /usr/local/mypkg sudo rm -rf /usr/local/var/mypkg sudo rm -rf /usr/local/mypkg* sudo rm -rf /Library/StartupItems/mypkg* sudo rm -rf /Library/PreferencePanes/MyPkg* rm -rf ~/Library/PreferencePanes/MyPkg* sudo rm -rf /Library/Receipts/mypkg* sudo rm -rf /Library/Receipts/MyPkg* Ubuntu Specific Ubuntu is debain based os, others are Mint, Elementary and PoP OS. Debain uses dpkg packaging system, for install/uninstall software. Packages are maintained in repositories , Main, Universe, Restricted and Multiverse. sudo add-apt-repository universe to enable a repo. PPA - Personal Package Archive - allows application developers to create their own repositories to distribute. sudo add-apt-repository ppa:mkusb/ppa add a ppa repo APT - Advanced Package Tool is CLT UI that works with core libraries to handle the installation and removal of software on Debian, Ubuntu. IT manages dependencies, config files and upgrades/downgrades. apt-get performs installation, search, updates to pkg available on system. works with sudo only. sudo apt-get update - updates local copy of packages database. The result has : Hit: no change in pkg Get: update available, downloads details but not the update Ign: ignores. sudo apt-get upgrade updates core system and apps installed. For one package update sudo apt-get upgrade [package_name] . sudo apt-get install [pkg1] [pkg2] if you know the name of apps. sudo apt-get remove [package_name] to uninstall. but kepps config files. sudo apt-get autoremove cleans up unwanted pkg. apt list --installed see all that's installed. apt=most common used command options from apt-get and apt-cache. It is high level wrapper on old apt-get. Use apt for better UI and info like summary and progress bar. Install a .deb file, eg, Chrome: sudo dpkg -i /path/to/foo.deb installs. sudo apt-get install -f fix-broken dependencies. Or simply use below to install with dependencies sudo apt install ./name.deb dpkg does not handle dependency, while apt does. apt under the hood uses dpkg. First Steps Do following in a new install update and upgrade sudo apt update && sudo apt upgrade codecs flash and fonts sudo apt install ubuntu-restricted-extras vlc - sudo apt install vlc chrome wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb then sudo dpkg -i google-chrome-stable_current_amd64.deb more - https://itsfoss.com/things-to-do-after-installing-ubuntu-20-04/ Clean up Delete apps - sudo apt purge thunderbird remove sw dependencies sudo apt autoremove remove partially installed packages sudo apt autoclean remove cache sudo apt clean Speed up disable animations gsettings set org.gnome.desktop.interface enable-animations false Dev Softwares sublime sudo snap install sublime-text --classic vs code sudo snap install code --classic Install Git and Gh: install git and essentials sudo apt-get install build-essential procps curl file git set up git - git config --global user.name \"YOUR NAME\" set up git - git config --global user.email \"YOUR EMAIL ADDRESS\" Install Jupyter notebook, see Python Notes https://iyadavvaibhav.github.io/python-notes/ Install nsepa and Citrix Workspace: wget http://ftp.br.debian.org/debian/pool/main/n/network-manager/libnm-util2_1.6.2-3+deb9u2_amd64.deb http://ftp.br.debian.org/debian/pool/main/n/network-manager/libnm-glib4_1.6.2-3+deb9u2_amd64.deb download debs sudo apt install ./libnm-util2_1.6.2-3+deb9u2_amd64.deb ./libnm-glib4_1.6.2-3+deb9u2_amd64.deb install the debs downloaded Download .deb file from Citrix, amd 64 cd ~/Downloads sudo dpkg -i icaclient_21.4.0.11_amd64.deb sudo apt-get install -f Others lsblk lists disk Check graphics card installed check hardware using lshw (list hardware) is a small Linux/Unix tool which is used to generate the detailed information of the system's hardware configuration from various files in the /proc directory. E.g. to see graphics driver - sudo lshw -c video check loaded modules using lsmod - it shows which loadable kernel modules are currently loaded. lsmod | grep radeon The glxinfo program shows information about the OpenGL and GLX implementations running on a given X display. sudo apt install mesa-utils and glxinfo -b Check boot message for graphics card in use dmesg | grep -i radeon Windows on Linux sudo apt-get install playonlinux installs wine too, 32 bit to install a program, create a virtual machine and install it. to install nfsmw create a machine, 32bit add drivers dcdx9 and vcrun6 more on install https://www.youtube.com/watch?v=lUqU_uf-o9E more on download https://www.youtube.com/watch?v=no8-fB4MX00&t=1s Users and Groups List all users getent passwd compgen -u cut -d: -f1 /etc/passwd List all groups compgen -g Add user to group - sudo adduser username group OS Setup and Virtualization USB Installation works like a charm, make a bootable live usb/cd - https://linuxhint.com/create_bootable_linux_usb_flash_drive/ boot from it and install to another USB - https://www.fosslinux.com/10212/how-to-install-a-complete-ubuntu-on-a-usb-flash-drive.htm space and drive speed is a issue. Clean grub of mac - https://apple.stackexchange.com/questions/337189/unwanted-grub-on-macos-high-sierra Tripe boot mac - https://www.youtube.com/watch?v=B0EuYHFeLAA First steps on Ubuntu - https://www.youtube.com/watch?v=GrI5c9PXS5k Virtual box add on: sudo apt update sudo apt install virtualbox-guest-dkms virtualbox-guest-x11 virtualbox-guest-utils Linux Ways ENVs: source activate [path to env] activates env source deactivate deactivates enn Emac Basic Press ctrl + c + x to save and exit a file. Other everything global is installed in /usr/local/bin/ use PostMan for http requests to REST routes rmdir removed empty dir rm -rf removes non/empty dir and files forcefully rm removes files not directories. youtube-dl youtube-dl --extract-audio --audio-format mp3 -o \"%(title)s.%(ext)s\" http://www.youtube.com/watch?v=fdf4542t5g -o is --output of filename. Mobile Linux Everything related to iOS and Android Linux. Install Termux App on Android. termux-setup-storage termux-change-repo pkg update pkg install git git --version pkg install python pkg install openssl pip install --upgrade youtube-dl youtube-dl -i PLyAyDdlMr3GOHFBt0IzgvED-n3uhwyrhd Install on a-Shell iOS App cd ~/code wget -qO- http://dl-cdn.alpinelinux.org/alpine/v3.12/main/x86/apk-tools-static-2.10.6-r0.apk | tar -xz sbin/apk.static && ./sbin/apk.static add apk-tools && rm sbin/apk.static apk add python3 apk add py3-pip pip install youtube-dl","title":"Mac and Linux Ways"},{"location":"2018-06-28-mac-linux-terminal/#mac-specific","text":"","title":"Mac Specific"},{"location":"2018-06-28-mac-linux-terminal/#homebrew","text":"package manager for mac, cask are usually GUIs apps like Sublime formulae are packages, CLIs, like node Brew Global Commands: brew update - Update brew and cask list, not packages brew upgrade - Upgrade all packages brew list - List installed packages and casks brew outdated - List outdated packages? brew doctor - Diagnose brew issues brew cleanup - cleans all packages brew services list - lists all services installed Brew Commands: brew install git - Install a package brew uninstall git - Remove/Uninstall a package brew upgrade git - Upgrade a package brew switch git 2.5.0 - Change versions brew list --versions git See what versions you have brew cleanup git Remove old versions Brew Cask (GUI) commands: brew install --cask firefox Install the Firefox browser brew list --cask List installed applications","title":"Homebrew"},{"location":"2018-06-28-mac-linux-terminal/#others","text":"diskutil list - lists all disks Format a disk from Mac terminal: diskutil eraseDisk FILE_SYSTEM DISK_NAME DISK_IDENTIFIER eg: diskutil eraseDisk FAT32 VY_Disk /dev/disk2 or use ExFAT /Volumes/PenDrive location of usb mounts Copy to clipboard $ pbcopy < my_filename.ext it copies the content of file to clipboard. It is helpful to quickly copy RSA key to clipboard which you need to paste on, may be, GitHub. Androids ~/.android - google utility folder avdmanager list avd - lists all android virtual devices installed. Uninstalling: Usually check for following dirs and remove: sudo rm /usr/local/mypkg sudo rm -rf /usr/local/var/mypkg sudo rm -rf /usr/local/mypkg* sudo rm -rf /Library/StartupItems/mypkg* sudo rm -rf /Library/PreferencePanes/MyPkg* rm -rf ~/Library/PreferencePanes/MyPkg* sudo rm -rf /Library/Receipts/mypkg* sudo rm -rf /Library/Receipts/MyPkg*","title":"Others"},{"location":"2018-06-28-mac-linux-terminal/#ubuntu-specific","text":"Ubuntu is debain based os, others are Mint, Elementary and PoP OS. Debain uses dpkg packaging system, for install/uninstall software. Packages are maintained in repositories , Main, Universe, Restricted and Multiverse. sudo add-apt-repository universe to enable a repo. PPA - Personal Package Archive - allows application developers to create their own repositories to distribute. sudo add-apt-repository ppa:mkusb/ppa add a ppa repo APT - Advanced Package Tool is CLT UI that works with core libraries to handle the installation and removal of software on Debian, Ubuntu. IT manages dependencies, config files and upgrades/downgrades. apt-get performs installation, search, updates to pkg available on system. works with sudo only. sudo apt-get update - updates local copy of packages database. The result has : Hit: no change in pkg Get: update available, downloads details but not the update Ign: ignores. sudo apt-get upgrade updates core system and apps installed. For one package update sudo apt-get upgrade [package_name] . sudo apt-get install [pkg1] [pkg2] if you know the name of apps. sudo apt-get remove [package_name] to uninstall. but kepps config files. sudo apt-get autoremove cleans up unwanted pkg. apt list --installed see all that's installed. apt=most common used command options from apt-get and apt-cache. It is high level wrapper on old apt-get. Use apt for better UI and info like summary and progress bar. Install a .deb file, eg, Chrome: sudo dpkg -i /path/to/foo.deb installs. sudo apt-get install -f fix-broken dependencies. Or simply use below to install with dependencies sudo apt install ./name.deb dpkg does not handle dependency, while apt does. apt under the hood uses dpkg.","title":"Ubuntu Specific"},{"location":"2018-06-28-mac-linux-terminal/#first-steps","text":"Do following in a new install update and upgrade sudo apt update && sudo apt upgrade codecs flash and fonts sudo apt install ubuntu-restricted-extras vlc - sudo apt install vlc chrome wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb then sudo dpkg -i google-chrome-stable_current_amd64.deb more - https://itsfoss.com/things-to-do-after-installing-ubuntu-20-04/ Clean up Delete apps - sudo apt purge thunderbird remove sw dependencies sudo apt autoremove remove partially installed packages sudo apt autoclean remove cache sudo apt clean Speed up disable animations gsettings set org.gnome.desktop.interface enable-animations false Dev Softwares sublime sudo snap install sublime-text --classic vs code sudo snap install code --classic Install Git and Gh: install git and essentials sudo apt-get install build-essential procps curl file git set up git - git config --global user.name \"YOUR NAME\" set up git - git config --global user.email \"YOUR EMAIL ADDRESS\" Install Jupyter notebook, see Python Notes https://iyadavvaibhav.github.io/python-notes/ Install nsepa and Citrix Workspace: wget http://ftp.br.debian.org/debian/pool/main/n/network-manager/libnm-util2_1.6.2-3+deb9u2_amd64.deb http://ftp.br.debian.org/debian/pool/main/n/network-manager/libnm-glib4_1.6.2-3+deb9u2_amd64.deb download debs sudo apt install ./libnm-util2_1.6.2-3+deb9u2_amd64.deb ./libnm-glib4_1.6.2-3+deb9u2_amd64.deb install the debs downloaded Download .deb file from Citrix, amd 64 cd ~/Downloads sudo dpkg -i icaclient_21.4.0.11_amd64.deb sudo apt-get install -f","title":"First Steps"},{"location":"2018-06-28-mac-linux-terminal/#others_1","text":"lsblk lists disk Check graphics card installed check hardware using lshw (list hardware) is a small Linux/Unix tool which is used to generate the detailed information of the system's hardware configuration from various files in the /proc directory. E.g. to see graphics driver - sudo lshw -c video check loaded modules using lsmod - it shows which loadable kernel modules are currently loaded. lsmod | grep radeon The glxinfo program shows information about the OpenGL and GLX implementations running on a given X display. sudo apt install mesa-utils and glxinfo -b Check boot message for graphics card in use dmesg | grep -i radeon Windows on Linux sudo apt-get install playonlinux installs wine too, 32 bit to install a program, create a virtual machine and install it. to install nfsmw create a machine, 32bit add drivers dcdx9 and vcrun6 more on install https://www.youtube.com/watch?v=lUqU_uf-o9E more on download https://www.youtube.com/watch?v=no8-fB4MX00&t=1s","title":"Others"},{"location":"2018-06-28-mac-linux-terminal/#users-and-groups","text":"List all users getent passwd compgen -u cut -d: -f1 /etc/passwd List all groups compgen -g Add user to group - sudo adduser username group","title":"Users and Groups"},{"location":"2018-06-28-mac-linux-terminal/#os-setup-and-virtualization","text":"USB Installation works like a charm, make a bootable live usb/cd - https://linuxhint.com/create_bootable_linux_usb_flash_drive/ boot from it and install to another USB - https://www.fosslinux.com/10212/how-to-install-a-complete-ubuntu-on-a-usb-flash-drive.htm space and drive speed is a issue. Clean grub of mac - https://apple.stackexchange.com/questions/337189/unwanted-grub-on-macos-high-sierra Tripe boot mac - https://www.youtube.com/watch?v=B0EuYHFeLAA First steps on Ubuntu - https://www.youtube.com/watch?v=GrI5c9PXS5k Virtual box add on: sudo apt update sudo apt install virtualbox-guest-dkms virtualbox-guest-x11 virtualbox-guest-utils","title":"OS Setup and Virtualization"},{"location":"2018-06-28-mac-linux-terminal/#linux-ways","text":"ENVs: source activate [path to env] activates env source deactivate deactivates enn Emac Basic Press ctrl + c + x to save and exit a file. Other everything global is installed in /usr/local/bin/ use PostMan for http requests to REST routes rmdir removed empty dir rm -rf removes non/empty dir and files forcefully rm removes files not directories.","title":"Linux Ways"},{"location":"2018-06-28-mac-linux-terminal/#youtube-dl","text":"youtube-dl --extract-audio --audio-format mp3 -o \"%(title)s.%(ext)s\" http://www.youtube.com/watch?v=fdf4542t5g -o is --output of filename.","title":"youtube-dl"},{"location":"2018-06-28-mac-linux-terminal/#mobile-linux","text":"Everything related to iOS and Android Linux. Install Termux App on Android. termux-setup-storage termux-change-repo pkg update pkg install git git --version pkg install python pkg install openssl pip install --upgrade youtube-dl youtube-dl -i PLyAyDdlMr3GOHFBt0IzgvED-n3uhwyrhd Install on a-Shell iOS App cd ~/code wget -qO- http://dl-cdn.alpinelinux.org/alpine/v3.12/main/x86/apk-tools-static-2.10.6-r0.apk | tar -xz sbin/apk.static && ./sbin/apk.static add apk-tools && rm sbin/apk.static apk add python3 apk add py3-pip pip install youtube-dl","title":"Mobile Linux"},{"location":"about/","text":"About H1 here is some info","title":"About H1"},{"location":"about/#about-h1","text":"here is some info","title":"About H1"},{"location":"git-notes/","text":"Git and GitHub Git is version control software to track changes in source code. GitHub is cloud storage for Gits. Do not remove this line (it will not be displayed) {:toc} What is Git Git is a distributed version-control system (VCS) for tracking changes in source code during software development. We check-in and check-out files to git and it keeps a track of the history. On mac it was pre installed as part of Xcode Command Line Tools. git --version to check the version of git installed. How to clone a repository from GitHub.com git clone https://github.com/YOUR-USERNAME/YOUR-REPOSITORY eg, git clone https://github.com/miguelgrinberg/microblog.git This will bring all the files from remote to local directory with git repository on local folder. Now if you have permission to commit to this repo then you can authenticate to push , else change the remote to another repo that you can push to. How to set up Git on a Local Folder Setup Git On any folder, do this once eg, mkdir myProject then cd myProject git init this will create a local git repository on your local drive. Now if you need to add this to a remote git repository, for example, a repository on github.com or bitbucket then you need to add remote to this folder. Now once you have written your code, you can add and commit new code to local git: Add and Commit code git add . adds all files to git. To add one file, pass filename. git diff shows changes made to files. git commit -m \"Message\" commits to git with message. optional, cat .gitignore add files that you want git to ignore Add Remote Create a new repository on GitHub.com on your local folder, git remote add [name] [url] will add remote. Here, name can be origin and url is https/ssh url of git repo created online on GitHub.com. Use SSH if you have SSH authentication setup. Once remote is added to your local git then you can push or pull the files based on the commands below. Syncing local and remote git pull pulls updates from remote to local git push pushes the committed changes from local to remote. We can also specify remote name and branch here. eg: git push -u origin master . SSH Authentication to push to remote You can connect to GitHub using the Secure Shell Protocol (SSH), which provides a secure channel over an unsecured network. It can help connect one machine to another using keys and thus avoiding to provide username and password/token on each request. id_rsa.pub is default public key. if ~/.ssh/id_rsa.pub exists do cat ~/.ssh/id_rsa.pub else generate SSH Key ssh-keygen , passphrase is optional. copy the content, Open GitHub, click your profile icon, settings, SSH and GPC Keys, Click on the new ssh key button. enter any title and key that you copied more - https://docs.github.com/en/authentication/connecting-to-github-with-ssh Checking Check using ssh -T git@github.com Output should say Hi <user_name>! You've successfully authenticated, but GitHub does not provide shell access. Fixing SSH issue error - ssh: connect to host github.com port 22: Connection refused change ssh config to use new url and port, Override SSH settings gedit ~/.ssh/config and add # Add section below to it Host github.com Hostname ssh.github.com Port 443 save and try again. Change your git remote to use SSH URL instead of HTTPS git remote set-url origin git@github.com:YOUR-USERNAME/REPO-NAME.git Get and Set Remotes git remote -v do on a folder to check remotes added. git remote get-url --all REMOTE-NAME to see URL of remote. git remote set-url origin https://github.com/YOUR-USERNAME/YOUR-REPO.git to update remote on a folder. Handling Conflicts If you push to git from two different repositories then there may be conflict. eg, you push from mac repo and a cloud repo or ubuntu repo. To handle conflict: Open conflicted file in editor and look for <<<<<<<< . You'll see the changes from the HEAD or base branch (github usually) after the line <<<<<<< HEAD ======== , it divides your changes from the other branch as >>>>>>>>YOUR_BRANCH_NAME You can decide if you want keep your branch changes or not. If you want to keep the changes what you did, delete the conflict marker they are, <<<<<<<, =======, >>>>>>> and then do a merge. Once done, add commit push :) Version controlling in GIT You can see previous versions of file in your git repository. to see the checkins done > git reflog 044cf0e (HEAD -> master) HEAD@{0}: commit: updates aae1995 HEAD@{1}: commit (initial): first commit git show HEAD@{1}:path/to/file.ext show file on terminal press down arrow to navigate and q to quit or git show -1 filename - shows difference with last revision use -1 or -2 or -3 and so on for going into history. Adding RSA for password free sync on Mac GitHub is excellent for code repositories online to share work, collaborate or keep a backup. I have followed an excellent post by Karl Broman on the same. To summaries the flow: Install git on local drive. Setup RSA for SSL: RSA is used for making safe authentications via SSL. Setup GitHub Account: You will get an online space to upload your code with version controlling. Related Posts : Further to this post, Set up Github Pages and Jekyll to get started with blogging and personal site. Github Actions Overview: GitHub Actions is yet another free option from GitHub, which is basically a build server in the cloud use case - have a build server automatically pick up changes in Markdown source files and build the static website directly on the build server. Eg, Your main branch has markdown files, and you have your static site build files on gh-pages branch. Now each time you update markdown on main branch, your build should run and push to gh-pages branch. For that create following workflow and ensure permissions Creating workflow - In the branch you want to use workflow, create new workflow. Navigate to the Actions tab and click New workflow. There's no pre-made template for MkDocs, so go ahead and click set up a workflow yourself to start from blank. This will generate a new file named main.yml in the .github/workflows folder. Add following. yaml name: build on: push: branches: - main jobs: deploy: runs-on: ubuntu-latest steps: - uses: actions/checkout@v2 - uses: actions/setup-python@v2 with: python-version: 3.x - run: pip install mkdocs - run: mkdocs gh-deploy --force --clean --verbose Its name can be any name, trigger on push to main branch. For permission, go to settings and ensure workflows have read and write permissions. Links: https://blog.elmah.io/deploying-a-mkdocs-documentation-site-with-github-actions/","title":"Git and GitHub"},{"location":"git-notes/#git-and-github","text":"Git is version control software to track changes in source code. GitHub is cloud storage for Gits. Do not remove this line (it will not be displayed) {:toc}","title":"Git and GitHub"},{"location":"git-notes/#what-is-git","text":"Git is a distributed version-control system (VCS) for tracking changes in source code during software development. We check-in and check-out files to git and it keeps a track of the history. On mac it was pre installed as part of Xcode Command Line Tools. git --version to check the version of git installed.","title":"What is Git"},{"location":"git-notes/#how-to-clone-a-repository-from-githubcom","text":"git clone https://github.com/YOUR-USERNAME/YOUR-REPOSITORY eg, git clone https://github.com/miguelgrinberg/microblog.git This will bring all the files from remote to local directory with git repository on local folder. Now if you have permission to commit to this repo then you can authenticate to push , else change the remote to another repo that you can push to.","title":"How to clone a repository from GitHub.com"},{"location":"git-notes/#how-to-set-up-git-on-a-local-folder","text":"Setup Git On any folder, do this once eg, mkdir myProject then cd myProject git init this will create a local git repository on your local drive. Now if you need to add this to a remote git repository, for example, a repository on github.com or bitbucket then you need to add remote to this folder. Now once you have written your code, you can add and commit new code to local git: Add and Commit code git add . adds all files to git. To add one file, pass filename. git diff shows changes made to files. git commit -m \"Message\" commits to git with message. optional, cat .gitignore add files that you want git to ignore Add Remote Create a new repository on GitHub.com on your local folder, git remote add [name] [url] will add remote. Here, name can be origin and url is https/ssh url of git repo created online on GitHub.com. Use SSH if you have SSH authentication setup. Once remote is added to your local git then you can push or pull the files based on the commands below. Syncing local and remote git pull pulls updates from remote to local git push pushes the committed changes from local to remote. We can also specify remote name and branch here. eg: git push -u origin master .","title":"How to set up Git on a Local Folder"},{"location":"git-notes/#ssh-authentication-to-push-to-remote","text":"You can connect to GitHub using the Secure Shell Protocol (SSH), which provides a secure channel over an unsecured network. It can help connect one machine to another using keys and thus avoiding to provide username and password/token on each request. id_rsa.pub is default public key. if ~/.ssh/id_rsa.pub exists do cat ~/.ssh/id_rsa.pub else generate SSH Key ssh-keygen , passphrase is optional. copy the content, Open GitHub, click your profile icon, settings, SSH and GPC Keys, Click on the new ssh key button. enter any title and key that you copied more - https://docs.github.com/en/authentication/connecting-to-github-with-ssh Checking Check using ssh -T git@github.com Output should say Hi <user_name>! You've successfully authenticated, but GitHub does not provide shell access. Fixing SSH issue error - ssh: connect to host github.com port 22: Connection refused change ssh config to use new url and port, Override SSH settings gedit ~/.ssh/config and add # Add section below to it Host github.com Hostname ssh.github.com Port 443 save and try again. Change your git remote to use SSH URL instead of HTTPS git remote set-url origin git@github.com:YOUR-USERNAME/REPO-NAME.git","title":"SSH Authentication to push to remote"},{"location":"git-notes/#get-and-set-remotes","text":"git remote -v do on a folder to check remotes added. git remote get-url --all REMOTE-NAME to see URL of remote. git remote set-url origin https://github.com/YOUR-USERNAME/YOUR-REPO.git to update remote on a folder.","title":"Get and Set Remotes"},{"location":"git-notes/#handling-conflicts","text":"If you push to git from two different repositories then there may be conflict. eg, you push from mac repo and a cloud repo or ubuntu repo. To handle conflict: Open conflicted file in editor and look for <<<<<<<< . You'll see the changes from the HEAD or base branch (github usually) after the line <<<<<<< HEAD ======== , it divides your changes from the other branch as >>>>>>>>YOUR_BRANCH_NAME You can decide if you want keep your branch changes or not. If you want to keep the changes what you did, delete the conflict marker they are, <<<<<<<, =======, >>>>>>> and then do a merge. Once done, add commit push :)","title":"Handling Conflicts"},{"location":"git-notes/#version-controlling-in-git","text":"You can see previous versions of file in your git repository. to see the checkins done > git reflog 044cf0e (HEAD -> master) HEAD@{0}: commit: updates aae1995 HEAD@{1}: commit (initial): first commit git show HEAD@{1}:path/to/file.ext show file on terminal press down arrow to navigate and q to quit or git show -1 filename - shows difference with last revision use -1 or -2 or -3 and so on for going into history.","title":"Version controlling in GIT"},{"location":"git-notes/#adding-rsa-for-password-free-sync-on-mac","text":"GitHub is excellent for code repositories online to share work, collaborate or keep a backup. I have followed an excellent post by Karl Broman on the same. To summaries the flow: Install git on local drive. Setup RSA for SSL: RSA is used for making safe authentications via SSL. Setup GitHub Account: You will get an online space to upload your code with version controlling. Related Posts : Further to this post, Set up Github Pages and Jekyll to get started with blogging and personal site.","title":"Adding RSA for password free sync on Mac"},{"location":"git-notes/#github-actions","text":"Overview: GitHub Actions is yet another free option from GitHub, which is basically a build server in the cloud use case - have a build server automatically pick up changes in Markdown source files and build the static website directly on the build server. Eg, Your main branch has markdown files, and you have your static site build files on gh-pages branch. Now each time you update markdown on main branch, your build should run and push to gh-pages branch. For that create following workflow and ensure permissions Creating workflow - In the branch you want to use workflow, create new workflow. Navigate to the Actions tab and click New workflow. There's no pre-made template for MkDocs, so go ahead and click set up a workflow yourself to start from blank. This will generate a new file named main.yml in the .github/workflows folder. Add following. yaml name: build on: push: branches: - main jobs: deploy: runs-on: ubuntu-latest steps: - uses: actions/checkout@v2 - uses: actions/setup-python@v2 with: python-version: 3.x - run: pip install mkdocs - run: mkdocs gh-deploy --force --clean --verbose Its name can be any name, trigger on push to main branch. For permission, go to settings and ensure workflows have read and write permissions. Links: https://blog.elmah.io/deploying-a-mkdocs-documentation-site-with-github-actions/","title":"Github Actions"},{"location":"new_updates/","text":"New Updates Are these picked by actions?","title":"New Updates"},{"location":"new_updates/#new-updates","text":"Are these picked by actions?","title":"New Updates"}]}